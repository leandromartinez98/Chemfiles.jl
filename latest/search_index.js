var documenterSearchIndex = {"docs":
[{"location":"tutorials/#Tutorials","page":"Tutorials","title":"Tutorials","text":"","category":"section"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"This section presents some hand-on tutorials to the chemfiles Julia package. All the code here is under the CC-0 Universal Licence which means that you are free to do whatever you want with it (i.e. it is Public Domain code)","category":"page"},{"location":"tutorials/#Read-a-single-frame","page":"Tutorials","title":"Read a single frame","text":"","category":"section"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"In this tutorials we will read a frame from a trajectory, and print the indexes of all the atom in the half-space x < 5.","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"We start by using the Chemfiles package to bring in scope the needed functions:","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"Then we open a Trajectory and read the first frame:","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"We can now create a list to store the indices of the atoms with x < 5, and get the positions of the atoms in the frame with the positions function","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"Iterating through the atoms in the frame, we get the ones matching our condition. size(::Frame) gives the number of atoms in the frame, which is also the size of the positions array. This positions array shape is  (3, size(frame)).","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"And finally we can print our results","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"<details><summary><a>Click here to see the whole program</a></summary>","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"The whole code looks like this","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"</details>","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"For more information about reading frame in a trajectory, see the following functions:","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"read_step to directly read a given step.\nset_cell!(::Trajectory) and set_topology!(::Trajectory) to specify an unit cell or a topology for all frames in a trajectory.","category":"page"},{"location":"tutorials/#Generating-a-structure","page":"Tutorials","title":"Generating a structure","text":"","category":"section"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"Now that we know how to read frames from a trajectory, let's try to create a new structure and write it to a file. As previsouly, we start by using the Chemfiles package","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"Everything starts in a Topology. This is the class that defines the atoms and the connectivity in a system. Here, we add three Atom and two bonds to create a water molecule.","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"We can then create a Frame corresponding to this topology. We resize the frame to ensure that the frame and the topology contains the same number of atoms.","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"We can then set the atomic positions:","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"Another possibility is to directly add atoms to the frame. Here we define a second molecule representing carbon dioxyde. add_atom! takes three arguments: the frame, the atom, and the position of the atom.","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"Finally, we can set the UnitCell associated with this frame.","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"Now that our frame is constructed, it is time to write it to a file. For that, we open a trajectory in write ('w') mode, and write to it, using the same syntax as a standard Julia open(...) do ... end block","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"<details><summary><a>Click here to see the whole program</a></summary>","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"Wrapping everything up, the whole code looks like this:","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"</details>","category":"page"},{"location":"tutorials/#Using-selections","page":"Tutorials","title":"Using selections","text":"","category":"section"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"Now that we know how to read and write frame from trajectories, how about we do a bit a filtering? In this tutorial, we will read all the frames from a file, and use selections to filter which atoms we will write back to another file. This example will also show how chemfiles can be used to convert from a file format to another one.","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"We start by opening the two trajectories we will need","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"And we create a Selection object to filter the atoms we want to remove.","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"Then we can iterate over all the frames in the trajectory, and use the selection to get the list of atoms to remove. The result of evaluate is a list containing the atoms matching the selection.","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"In order to remove the atoms from the frame, we need to sort the to_remove list in descending order: removing the atom at index i will shift the index of all the atoms after i. So we start from the end and work toward the start of the frame.","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"Finally, we can write the cleaned frame to the output file, and start the next iteration.","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"Since we opened the files directly instead of using a do ... end block, we hae to close them to flush all buffers and release file descriptors.","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"<details><summary><a>Click here to see the whole program</a></summary>","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"The whole program look like this:","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"","category":"page"},{"location":"tutorials/","page":"Tutorials","title":"Tutorials","text":"</details>","category":"page"},{"location":"reference/trajectory/#Trajectory","page":"Trajectory","title":"Trajectory","text":"","category":"section"},{"location":"reference/trajectory/","page":"Trajectory","title":"Trajectory","text":"Trajectory","category":"page"},{"location":"reference/trajectory/#Chemfiles.Trajectory","page":"Trajectory","title":"Chemfiles.Trajectory","text":"A Trajectory represents a simulation file on the hard drive. It can read or write one or many Frames to this file. The file format can be automatically determined from the extention, or manually specified. Writing to a Trajectory is buffered, which means that one needs to close() the trajectory and flush the buffer before being able to read the file again.\n\n\n\n\n\n","category":"type"},{"location":"reference/trajectory/","page":"Trajectory","title":"Trajectory","text":"Modules = [Chemfiles]\nPages   = [\"Trajectory.jl\"]","category":"page"},{"location":"reference/trajectory/#Chemfiles.Trajectory-2","page":"Trajectory","title":"Chemfiles.Trajectory","text":"Trajectory(path::AbstractString, mode::Char='r', format::AbstractString=\"\")\n\nThe Trajectory function opens a trajectory file, using the file at the given path. The opening mode can be 'r' for read, 'w' for write or 'a' for append, and defaults to 'r'. The optional format parameter give a specific file format to use when opening the file.\n\n\n\n\n\n","category":"type"},{"location":"reference/trajectory/#Chemfiles.Trajectory-Tuple{Function,Vararg{Any,N} where N}","page":"Trajectory","title":"Chemfiles.Trajectory","text":"Trajectory(f::Function, args...)\n\nApply the function f to the result of Trajectory(args...) and close the resulting trajectory upon completion, similar to open(f, args...).\n\n\n\n\n\n","category":"method"},{"location":"reference/trajectory/#Base.close-Tuple{Trajectory}","page":"Trajectory","title":"Base.close","text":"close(trajectory::Trajectory)\n\nClose a trajectory. This function flushes any buffer content to the hard drive, and frees the associated memory. Necessary when running on the REPL to finish writing.\n\n\n\n\n\n","category":"method"},{"location":"reference/trajectory/#Base.isopen-Tuple{Trajectory}","page":"Trajectory","title":"Base.isopen","text":"isopen(trajectory::Trajectory)\n\nCheck if the trajectory is open.\n\n\n\n\n\n","category":"method"},{"location":"reference/trajectory/#Base.length-Tuple{Trajectory}","page":"Trajectory","title":"Base.length","text":"length(trajectory::Trajectory)\n\nGet the number of steps (the number of frames) in a trajectory.\n\n\n\n\n\n","category":"method"},{"location":"reference/trajectory/#Base.read-Tuple{Trajectory}","page":"Trajectory","title":"Base.read","text":"read(trajectory::Trajectory)\n\nRead the next step of the trajectory, and return the corresponding Frame.\n\n\n\n\n\n","category":"method"},{"location":"reference/trajectory/#Base.size-Tuple{Trajectory}","page":"Trajectory","title":"Base.size","text":"size(trajectory::Trajectory)\n\nGet the number of steps (the number of frames) in a trajectory.\n\n\n\n\n\n","category":"method"},{"location":"reference/trajectory/#Base.write-Tuple{Trajectory,Frame}","page":"Trajectory","title":"Base.write","text":"write(trajectory::Trajectory, frame::Frame)\n\nWrite the given frame to the trajectory.\n\n\n\n\n\n","category":"method"},{"location":"reference/trajectory/#Chemfiles.path-Tuple{Trajectory}","page":"Trajectory","title":"Chemfiles.path","text":"path(trajectory::Trajectory)\n\nGet the path used to open a trajectory.\n\n\n\n\n\n","category":"method"},{"location":"reference/trajectory/#Chemfiles.read_step-Tuple{Trajectory,Integer}","page":"Trajectory","title":"Chemfiles.read_step","text":"read_step(trajectory::Trajectory, step::Integer)\n\nRead the given step of the trajectory, and return the corresponding Frame.\n\n\n\n\n\n","category":"method"},{"location":"reference/trajectory/#Chemfiles.set_cell!-Tuple{Trajectory,UnitCell}","page":"Trajectory","title":"Chemfiles.set_cell!","text":"set_cell!(trajectory::Trajectory, cell::UnitCell)\n\nSet the cell associated with a trajectory. This cell will be used when reading and writing the file, replacing any unit cell in the file.\n\n\n\n\n\n","category":"method"},{"location":"reference/trajectory/#Chemfiles.set_topology!","page":"Trajectory","title":"Chemfiles.set_topology!","text":"set_topology!(trajectory::Trajectory, path::AbstractString, format::AbstractString = \"\")\n\nSet the Topology associated with a trajectory by reading the first frame of the file at path; and extracting the topology of this frame. The optional format parameter can be used to specify the file format.\n\n\n\n\n\n","category":"function"},{"location":"reference/trajectory/#Chemfiles.set_topology!-Tuple{Trajectory,Topology}","page":"Trajectory","title":"Chemfiles.set_topology!","text":"set_topology!(trajectory::Trajectory, topology::Topology)\n\nSet the Topology associated with a trajectory. This topology will be used when reading and writing the file, replacing any topology in the file.\n\n\n\n\n\n","category":"method"},{"location":"reference/frame/#Frame","page":"Frame","title":"Frame","text":"","category":"section"},{"location":"reference/frame/","page":"Frame","title":"Frame","text":"Frame","category":"page"},{"location":"reference/frame/#Chemfiles.Frame","page":"Frame","title":"Chemfiles.Frame","text":"A Frame holds data for one step of a simulation. As not all formats provide all the types of information, some fields may be initialized to a default value. A Frame may contain the following data:\n\nPositions for all the atoms in the system;\nVelocities for all the atoms in the system;\nThe Topology of the system;\nThe UnitCell of the system.\n\n\n\n\n\n","category":"type"},{"location":"reference/frame/","page":"Frame","title":"Frame","text":"Modules = [Chemfiles]\nPages   = [\"Frame.jl\"]","category":"page"},{"location":"reference/frame/#Chemfiles.Frame-Tuple{}","page":"Frame","title":"Chemfiles.Frame","text":"Frame()\n\nCreate a new empty Frame.\n\n\n\n\n\n","category":"method"},{"location":"reference/frame/#Base.angle-Tuple{Frame,Integer,Integer,Integer}","page":"Frame","title":"Base.angle","text":"angle(frame::Frame, i::Integer, j::Integer, k::Integer)\n\nCalculate the angle made by three atoms.\n\n\n\n\n\n","category":"method"},{"location":"reference/frame/#Base.deepcopy-Tuple{Frame}","page":"Frame","title":"Base.deepcopy","text":"deepcopy(frame::Frame)\n\nMake a deep copy of a Frame.\n\n\n\n\n\n","category":"method"},{"location":"reference/frame/#Base.length-Tuple{Frame}","page":"Frame","title":"Base.length","text":"length(frame::Frame)\n\nGet the number of atoms in the frame.\n\n\n\n\n\n","category":"method"},{"location":"reference/frame/#Base.resize!-Tuple{Frame,Integer}","page":"Frame","title":"Base.resize!","text":"resize!(frame::Frame, natoms::Integer)\n\nResize the positions and the velocities in the frame, to make space for natoms atoms. This function may invalidate any pointer to the positions or the velocities if the new size is bigger than the old one. In all the cases, previous data is conserved. This function conserve the presence or absence of velocities.\n\n\n\n\n\n","category":"method"},{"location":"reference/frame/#Base.size-Tuple{Frame}","page":"Frame","title":"Base.size","text":"size(frame::Frame)\n\nGet the number of atoms in the frame.\n\n\n\n\n\n","category":"method"},{"location":"reference/frame/#Base.step-Tuple{Frame}","page":"Frame","title":"Base.step","text":"step(frame::Frame)\n\nGet the frame step, i.e. the frame number in the trajectory.\n\n\n\n\n\n","category":"method"},{"location":"reference/frame/#Chemfiles.add_atom!","page":"Frame","title":"Chemfiles.add_atom!","text":"add_atom!(\n    frame::Frame,\n    atom::Atom,\n    position::Vector{Float64},\n    velocity::Vector{Float64} = Float64[0.0,0.0,0.0]\n)\n\nAdd an atom and the corresponding position and velocity data to a frame.\n\n\n\n\n\n","category":"function"},{"location":"reference/frame/#Chemfiles.add_bond!","page":"Frame","title":"Chemfiles.add_bond!","text":"add_bond!(frame::Frame, i::Integer, j::Integer, order=nothing)\n\nAdd an additional bond to the Frame's Topology.\n\n\n\n\n\n","category":"function"},{"location":"reference/frame/#Chemfiles.add_residue!-Tuple{Frame,Residue}","page":"Frame","title":"Chemfiles.add_residue!","text":"add_residue!(frame::Frame, residue::Residue)\n\nAdd a residue to the Frame's Topology.\n\n\n\n\n\n","category":"method"},{"location":"reference/frame/#Chemfiles.add_velocities!-Tuple{Frame}","page":"Frame","title":"Chemfiles.add_velocities!","text":"add_velocities!(frame::Frame)\n\nAdd velocities to this frame. The storage is initialized with the result of size(frame) as the number of atoms. If the frame already has velocities, this does nothing.\n\n\n\n\n\n","category":"method"},{"location":"reference/frame/#Chemfiles.dihedral-Tuple{Frame,Integer,Integer,Integer,Integer}","page":"Frame","title":"Chemfiles.dihedral","text":"dihedral(frame::Frame, i::Integer, j::Integer, k::Integer, m::Integer)\n\nCalculate the dihedral (torsional) angle made by four unbranched atoms.\n\n\n\n\n\n","category":"method"},{"location":"reference/frame/#Chemfiles.distance-Tuple{Frame,Integer,Integer}","page":"Frame","title":"Chemfiles.distance","text":"distance(frame::Frame, i::Integer, j::Integer)\n\nCalculate the distance between two atoms.\n\n\n\n\n\n","category":"method"},{"location":"reference/frame/#Chemfiles.guess_bonds!-Tuple{Frame}","page":"Frame","title":"Chemfiles.guess_bonds!","text":"guess_bonds!(frame::Frame)\n\nGuess the bonds, angles, and dihedrals in the frame using a distance criteria.\n\n\n\n\n\n","category":"method"},{"location":"reference/frame/#Chemfiles.has_velocities-Tuple{Frame}","page":"Frame","title":"Chemfiles.has_velocities","text":"has_velocities(frame::Frame)\n\nCheck if a frame contains velocity data or not.\n\n\n\n\n\n","category":"method"},{"location":"reference/frame/#Chemfiles.list_properties-Tuple{Frame}","page":"Frame","title":"Chemfiles.list_properties","text":"list_properties(frame::Frame)\n\nGet the names of all properties associated with a frame.\n\n\n\n\n\n","category":"method"},{"location":"reference/frame/#Chemfiles.out_of_plane-Tuple{Frame,Integer,Integer,Integer,Integer}","page":"Frame","title":"Chemfiles.out_of_plane","text":"out_of_plane(frame::Frame, i::Integer, j::Integer, k::Integer, m::Integer)\n\nCalculate the out-of-plane (improper) angle made by four atoms.\n\n\n\n\n\n","category":"method"},{"location":"reference/frame/#Chemfiles.positions-Tuple{Frame}","page":"Frame","title":"Chemfiles.positions","text":"positions(frame::Frame)\n\nGet the positions in a Frame as an array. The positions are readable and writable from this array. If the frame is resized (by writing to it, or calling resize!), the array is invalidated.\n\n\n\n\n\n","category":"method"},{"location":"reference/frame/#Chemfiles.properties_count-Tuple{Frame}","page":"Frame","title":"Chemfiles.properties_count","text":"properties_count(frame::Frame)\n\nGet the number of properties associated with a frame.\n\n\n\n\n\n","category":"method"},{"location":"reference/frame/#Chemfiles.property-Tuple{Frame,String}","page":"Frame","title":"Chemfiles.property","text":"property(frame::Frame, name::String)\n\nGet a named property for the given atom.\n\n\n\n\n\n","category":"method"},{"location":"reference/frame/#Chemfiles.remove_atom!-Tuple{Frame,Integer}","page":"Frame","title":"Chemfiles.remove_atom!","text":"remove_atom!(frame::Frame, index::Integer)\n\nRemove the atom at index from the frame.\n\nThis function modifies all the atoms indexes after index, and invalidates any array obtained using positions or velocities.\n\n\n\n\n\n","category":"method"},{"location":"reference/frame/#Chemfiles.remove_bond!-Tuple{Frame,Integer,Integer}","page":"Frame","title":"Chemfiles.remove_bond!","text":"remove_bond!(frame::Frame, i::Integer, j::Integer)\n\nRemove a bond from the Frame's Topology.\n\n\n\n\n\n","category":"method"},{"location":"reference/frame/#Chemfiles.set_cell!-Tuple{Frame,UnitCell}","page":"Frame","title":"Chemfiles.set_cell!","text":"set_cell!(frame::Frame, cell::UnitCell)\n\nSet the cell associated with a frame.\n\n\n\n\n\n","category":"method"},{"location":"reference/frame/#Chemfiles.set_property!-Tuple{Frame,String,Any}","page":"Frame","title":"Chemfiles.set_property!","text":"set_property!(frame::Frame, name::String, value)\n\nSet a named property for the given Frame.\n\n\n\n\n\n","category":"method"},{"location":"reference/frame/#Chemfiles.set_step!-Tuple{Frame,Integer}","page":"Frame","title":"Chemfiles.set_step!","text":"set_step!(frame::Frame, step::Integer)\n\nSet the frame step to step.\n\n\n\n\n\n","category":"method"},{"location":"reference/frame/#Chemfiles.set_topology!-Tuple{Frame,Topology}","page":"Frame","title":"Chemfiles.set_topology!","text":"set_topology!(frame::Frame, topology::Topology)\n\nSet the topology associated with a frame.\n\n\n\n\n\n","category":"method"},{"location":"reference/frame/#Chemfiles.velocities-Tuple{Frame}","page":"Frame","title":"Chemfiles.velocities","text":"velocities(frame::Frame)\n\nGet the velocities in a Frame as an array. The velocities are readable and writable from this array. If the frame is resized (by writing to it, or calling resize!), the array is invalidated.\n\nIf the frame do not have velocity, this function will error. You can use add_velocities! to add velocities to a frame before calling this function.\n\n\n\n\n\n","category":"method"},{"location":"reference/atom/#Atom","page":"Atom","title":"Atom","text":"","category":"section"},{"location":"reference/atom/","page":"Atom","title":"Atom","text":"Atom","category":"page"},{"location":"reference/atom/#Chemfiles.Atom","page":"Atom","title":"Chemfiles.Atom","text":"An Atom is a particle in the current Frame.\n\nAn atom stores the following atomic properties:\n\natom name\natom type\natom mass\natom charge\n\nThe atom name is usually an unique identifier (\"H1\", \"C_a\") while the atom type will be shared among all particles of the same type: \"H\", \"Ow\", \"CH3\".\n\n\n\n\n\n","category":"type"},{"location":"reference/atom/","page":"Atom","title":"Atom","text":"Modules = [Chemfiles]\nPages   = [\"Atom.jl\"]","category":"page"},{"location":"reference/atom/#Chemfiles.Atom-Tuple{Frame,Integer}","page":"Atom","title":"Chemfiles.Atom","text":"Atom(frame::Frame, index::Integer)\n\nGet a copy of the atom at the given index from a frame.\n\n\n\n\n\n","category":"method"},{"location":"reference/atom/#Chemfiles.Atom-Tuple{String}","page":"Atom","title":"Chemfiles.Atom","text":"Atom(name::String)\n\nCreate an atom with the given name and set the atom type to be the same as name.\n\n\n\n\n\n","category":"method"},{"location":"reference/atom/#Chemfiles.Atom-Tuple{Topology,Integer}","page":"Atom","title":"Chemfiles.Atom","text":"Atom(topology::Topology, index::Integer)\n\nGet a copy of the atom at the given index from a topology.\n\n\n\n\n\n","category":"method"},{"location":"reference/atom/#Base.deepcopy-Tuple{Atom}","page":"Atom","title":"Base.deepcopy","text":"deepcopy(atom::Atom)\n\nMake a deep copy of an atom.\n\n\n\n\n\n","category":"method"},{"location":"reference/atom/#Base.fullname-Tuple{Atom}","page":"Atom","title":"Base.fullname","text":"fullname(atom::Atom)\n\nGet the full name of an atom from the atom type.\n\nFor example, the full name of an atom with type \"He\" is \"Helium\".\n\n\n\n\n\n","category":"method"},{"location":"reference/atom/#Chemfiles.atomic_number-Tuple{Atom}","page":"Atom","title":"Chemfiles.atomic_number","text":"atomic_number(atom::Atom)\n\nGet the atomic number of an atom from the atom type.\n\nIf the atomic number can not be found, returns 0.\n\n\n\n\n\n","category":"method"},{"location":"reference/atom/#Chemfiles.charge-Tuple{Atom}","page":"Atom","title":"Chemfiles.charge","text":"charge(atom::Atom)\n\nGet the charge of an atom in number of the electron charge e.\n\n\n\n\n\n","category":"method"},{"location":"reference/atom/#Chemfiles.covalent_radius-Tuple{Atom}","page":"Atom","title":"Chemfiles.covalent_radius","text":"covalent_radius(atom::Atom)\n\nGet the covalent radius of an atom from the atom type.\n\nIf the radius can not be found, returns 0.\n\n\n\n\n\n","category":"method"},{"location":"reference/atom/#Chemfiles.list_properties-Tuple{Atom}","page":"Atom","title":"Chemfiles.list_properties","text":"list_properties(atom::Atom)\n\nGet the names of all properties associated with an atom.\n\n\n\n\n\n","category":"method"},{"location":"reference/atom/#Chemfiles.mass-Tuple{Atom}","page":"Atom","title":"Chemfiles.mass","text":"mass(atom::Atom)\n\nGet the mass of an atom in atomic mass units.\n\n\n\n\n\n","category":"method"},{"location":"reference/atom/#Chemfiles.name-Tuple{Atom}","page":"Atom","title":"Chemfiles.name","text":"name(atom::Atom)\n\nGet the name of an atom.\n\n\n\n\n\n","category":"method"},{"location":"reference/atom/#Chemfiles.properties_count-Tuple{Atom}","page":"Atom","title":"Chemfiles.properties_count","text":"properties_count(atom::Atom)\n\nGet the number of properties associated with an atom.\n\n\n\n\n\n","category":"method"},{"location":"reference/atom/#Chemfiles.property-Tuple{Atom,String}","page":"Atom","title":"Chemfiles.property","text":"property(atom::Atom, name::String)\n\nGet a named property for the given atom.\n\n\n\n\n\n","category":"method"},{"location":"reference/atom/#Chemfiles.set_charge!-Tuple{Atom,Any}","page":"Atom","title":"Chemfiles.set_charge!","text":"set_charge!(atom::Atom, charge)\n\nSet the charge of an atom to charge.\n\nThe charge must be in number of the electron charge e.\n\n\n\n\n\n","category":"method"},{"location":"reference/atom/#Chemfiles.set_mass!-Tuple{Atom,Any}","page":"Atom","title":"Chemfiles.set_mass!","text":"set_mass!(atom::Atom, mass)\n\nSet the mass of an atom to mass.\n\nThe mass must be in atomic mass units.\n\n\n\n\n\n","category":"method"},{"location":"reference/atom/#Chemfiles.set_name!-Tuple{Atom,String}","page":"Atom","title":"Chemfiles.set_name!","text":"set_name!(atom::Atom, name::String)\n\nSet the name of an atom to name.\n\n\n\n\n\n","category":"method"},{"location":"reference/atom/#Chemfiles.set_property!-Tuple{Atom,String,Any}","page":"Atom","title":"Chemfiles.set_property!","text":"set_property!(atom::Atom, name::String, value)\n\nSet a named property for the given atom.\n\n\n\n\n\n","category":"method"},{"location":"reference/atom/#Chemfiles.set_type!-Tuple{Atom,String}","page":"Atom","title":"Chemfiles.set_type!","text":"set_type!(atom::Atom, type::String)\n\nSet the type of an atom to type.\n\n\n\n\n\n","category":"method"},{"location":"reference/atom/#Chemfiles.type-Tuple{Atom}","page":"Atom","title":"Chemfiles.type","text":"type(atom::Atom)\n\nGet the type of an atom.\n\n\n\n\n\n","category":"method"},{"location":"reference/atom/#Chemfiles.vdw_radius-Tuple{Atom}","page":"Atom","title":"Chemfiles.vdw_radius","text":"vdw_radius(atom::Atom)\n\nGet the van der Waals radius of an atom from the atom type.\n\nIf the radius can not be found, this function returns 0.\n\n\n\n\n\n","category":"method"},{"location":"reference/misc/#Miscelaneous-functions","page":"Miscelaneous functions","title":"Miscelaneous functions","text":"","category":"section"},{"location":"reference/misc/","page":"Miscelaneous functions","title":"Miscelaneous functions","text":"Modules = [Chemfiles]\nPages   = [\"misc.jl\"]\nFilter  = name -> !startswith(string(name), \"_\")","category":"page"},{"location":"reference/misc/#Chemfiles.add_configuration-Tuple{String}","page":"Miscelaneous functions","title":"Chemfiles.add_configuration","text":"Chemfile.add_configuration(path::String)\n\nRead configuration data from the file at path.\n\nBy default, chemfiles reads configuration from any file name .chemfilesrc in the current directory or any parent directory. This function can be used to add data from another configuration file.\n\nThis function will fail if there is no file at path, or if the file is incorectly formatted. Data from the new configuration file will overwrite any existing data.\n\n\n\n\n\n","category":"method"},{"location":"reference/misc/#Chemfiles.clear_errors-Tuple{}","page":"Miscelaneous functions","title":"Chemfiles.clear_errors","text":"Chemfiles.clear_errors()\n\nClear any error messages stored by the chemfiles runtime.\n\n\n\n\n\n","category":"method"},{"location":"reference/misc/#Chemfiles.last_error-Tuple{}","page":"Miscelaneous functions","title":"Chemfiles.last_error","text":"Chemfiles.last_error()\n\nGet the last error message from the chemfiles runtime.\n\n\n\n\n\n","category":"method"},{"location":"reference/misc/#Chemfiles.set_warning_callback-Tuple{Function}","page":"Miscelaneous functions","title":"Chemfiles.set_warning_callback","text":"Chemfiles.set_warning_callback(callback::Function)\n\nSet the global warning callback to be used for each warning event.\n\nThe callback function must take a String and return nothing.\n\n\n\n\n\n","category":"method"},{"location":"reference/cell/#UnitCell","page":"UnitCell","title":"UnitCell","text":"","category":"section"},{"location":"reference/cell/","page":"UnitCell","title":"UnitCell","text":"UnitCell\nCellShape","category":"page"},{"location":"reference/cell/#Chemfiles.UnitCell","page":"UnitCell","title":"Chemfiles.UnitCell","text":"A UnitCell describes the bounding box of a system. It is represented by three base vectors of lengths a, b, and c; and the angles between these vectors are alpha, beta, and gamma.\n\n\n\n\n\n","category":"type"},{"location":"reference/cell/#Chemfiles.CellShape","page":"UnitCell","title":"Chemfiles.CellShape","text":"The possible shape for an unit cell are:\n\nChemfiles.Orthorhombic for unit cells with the three angles are 90°.\nChemfiles.Triclinic for unit cells where the three angles may not be 90°.\nChemfiles.Infinite for unit cells without boundaries.\n\n\n\n\n\n","category":"type"},{"location":"reference/cell/","page":"UnitCell","title":"UnitCell","text":"Modules = [Chemfiles]\nPages   = [\"UnitCell.jl\"]","category":"page"},{"location":"reference/cell/#Chemfiles.UnitCell-NTuple{6,Number}","page":"UnitCell","title":"Chemfiles.UnitCell","text":"UnitCell(a::Number, b::Number, c::Number, α::Number, β::Number, γ::Number)\n\nCreate an UnitCell from the three lenghts and three angles.\n\n\n\n\n\n","category":"method"},{"location":"reference/cell/#Chemfiles.UnitCell-Tuple{Frame}","page":"UnitCell","title":"Chemfiles.UnitCell","text":"UnitCell(frame::Frame)\n\nGet a copy of the UnitCell of a frame.\n\n\n\n\n\n","category":"method"},{"location":"reference/cell/#Chemfiles.UnitCell-Tuple{Number,Number,Number}","page":"UnitCell","title":"Chemfiles.UnitCell","text":"UnitCell(a::Number, b::Number, c::Number)\n\nCreate an UnitCell from the three lenghts, with all the angles equal to 90°.\n\n\n\n\n\n","category":"method"},{"location":"reference/cell/#Base.deepcopy-Tuple{UnitCell}","page":"UnitCell","title":"Base.deepcopy","text":"deepcopy(cell::UnitCell)\n\nMake a deep copy of a cell.\n\n\n\n\n\n","category":"method"},{"location":"reference/cell/#Chemfiles.angles-Tuple{UnitCell}","page":"UnitCell","title":"Chemfiles.angles","text":"angles(cell::UnitCell)\n\nGet the three cell angles (alpha, beta, and gamma) in degrees.\n\n\n\n\n\n","category":"method"},{"location":"reference/cell/#Chemfiles.lengths-Tuple{UnitCell}","page":"UnitCell","title":"Chemfiles.lengths","text":"lengths(cell::UnitCell)\n\nGet the three cell lengths (a, b, and c) in angstroms.\n\n\n\n\n\n","category":"method"},{"location":"reference/cell/#Chemfiles.matrix-Tuple{UnitCell}","page":"UnitCell","title":"Chemfiles.matrix","text":"matrix(cell::UnitCell)\n\nGet the cell matricial representation, i.e. the representation of the three base vectors as::\n\n    | a_x   b_x   c_x |\n    |  0    b_y   c_y |\n    |  0     0    c_z |\n\n\n\n\n\n","category":"method"},{"location":"reference/cell/#Chemfiles.set_angles!-Tuple{UnitCell,Real,Real,Real}","page":"UnitCell","title":"Chemfiles.set_angles!","text":"set_angles!(cell::UnitCell, α::Real, β::Real, γ::Real)\n\nSet the cell angles to α, β, and γ.\n\nα, β, and γ should be in degrees.\n\n\n\n\n\n","category":"method"},{"location":"reference/cell/#Chemfiles.set_lengths!-Tuple{UnitCell,Real,Real,Real}","page":"UnitCell","title":"Chemfiles.set_lengths!","text":"set_lengths!(cell::UnitCell, a::Real, b::Real, c::Real)\n\nSet the cell lengths to a, b, and c.\n\na, b, and c should be in angstroms.\n\n\n\n\n\n","category":"method"},{"location":"reference/cell/#Chemfiles.set_shape!-Tuple{UnitCell,CellShape}","page":"UnitCell","title":"Chemfiles.set_shape!","text":"set_shape!(cell::UnitCell, shape::CellShape)\n\nSet the cell shape to the given shape.\n\n\n\n\n\n","category":"method"},{"location":"reference/cell/#Chemfiles.shape-Tuple{UnitCell}","page":"UnitCell","title":"Chemfiles.shape","text":"shape(cell::UnitCell)\n\nGet the cell shape, as a CellShape value.\n\n\n\n\n\n","category":"method"},{"location":"reference/cell/#Chemfiles.volume-Tuple{UnitCell}","page":"UnitCell","title":"Chemfiles.volume","text":"volume(cell::UnitCell)\n\nGet the unit cell volume.\n\n\n\n\n\n","category":"method"},{"location":"reference/cell/#Chemfiles.wrap!-Tuple{UnitCell,Array{Float64,1}}","page":"UnitCell","title":"Chemfiles.wrap!","text":"wrap!(cell::UnitCell, vector::Vector{Float64})\n\nWrap a vector in the unit cell.\n\n\n\n\n\n","category":"method"},{"location":"reference/residue/#Residue","page":"Residue","title":"Residue","text":"","category":"section"},{"location":"reference/residue/","page":"Residue","title":"Residue","text":"Residue","category":"page"},{"location":"reference/residue/#Chemfiles.Residue","page":"Residue","title":"Chemfiles.Residue","text":"A Residue is a group of atoms belonging to the same logical unit. They can be small molecules, amino-acids in a protein, monomers in polymers, etc.\n\n\n\n\n\n","category":"type"},{"location":"reference/residue/","page":"Residue","title":"Residue","text":"Modules = [Chemfiles]\nPages   = [\"Residue.jl\"]","category":"page"},{"location":"reference/residue/#Chemfiles.Residue-2","page":"Residue","title":"Chemfiles.Residue","text":"Residue(name::String, id=nothing)\n\nCreate a new residue with the given name and optional residue identifier id.\n\n\n\n\n\n","category":"type"},{"location":"reference/residue/#Chemfiles.Residue-Tuple{Topology,Integer}","page":"Residue","title":"Chemfiles.Residue","text":"Residue(topology::Topology, index::Integer)\n\nGet a copy of the residue at index from a topology.\n\nThe residue index in the topology is not always the same as the residue identifier.\n\n\n\n\n\n","category":"method"},{"location":"reference/residue/#Base.deepcopy-Tuple{Residue}","page":"Residue","title":"Base.deepcopy","text":"deepcopy(residue::Residue)\n\nMake a deep copy of a residue.\n\n\n\n\n\n","category":"method"},{"location":"reference/residue/#Base.size-Tuple{Residue}","page":"Residue","title":"Base.size","text":"size(residue::Residue)\n\nGet the number of atoms in a residue.\n\n\n\n\n\n","category":"method"},{"location":"reference/residue/#Chemfiles.add_atom!-Tuple{Residue,Integer}","page":"Residue","title":"Chemfiles.add_atom!","text":"add_atom!(residue::Residue, index::Integer)\n\nAdd the atom at the given index in the residue.\n\n\n\n\n\n","category":"method"},{"location":"reference/residue/#Chemfiles.atoms-Tuple{Residue}","page":"Residue","title":"Chemfiles.atoms","text":"atoms(residue::Residue)\n\nGet the atoms in a residue. This function returns a list of indexes.\n\n\n\n\n\n","category":"method"},{"location":"reference/residue/#Chemfiles.id-Tuple{Residue}","page":"Residue","title":"Chemfiles.id","text":"id(residue::Residue)\n\nGet the identifier of a residue in the initial topology.\n\n\n\n\n\n","category":"method"},{"location":"reference/residue/#Chemfiles.list_properties-Tuple{Residue}","page":"Residue","title":"Chemfiles.list_properties","text":"list_properties(residue::Residue)\n\nGet the names of all properties associated with a residue.\n\n\n\n\n\n","category":"method"},{"location":"reference/residue/#Chemfiles.name-Tuple{Residue}","page":"Residue","title":"Chemfiles.name","text":"name(residue::Residue)\n\nGet the name of a residue.\n\n\n\n\n\n","category":"method"},{"location":"reference/residue/#Chemfiles.properties_count-Tuple{Residue}","page":"Residue","title":"Chemfiles.properties_count","text":"properties_count(residue::Residue)\n\nGet the number of properties associated with a residue.\n\n\n\n\n\n","category":"method"},{"location":"reference/residue/#Chemfiles.property-Tuple{Residue,String}","page":"Residue","title":"Chemfiles.property","text":"property(residue::Residue, name::String)\n\nGet a named property for the given residue.\n\n\n\n\n\n","category":"method"},{"location":"reference/residue/#Chemfiles.residue_for_atom-Tuple{Topology,Integer}","page":"Residue","title":"Chemfiles.residue_for_atom","text":"residue_for_atom(topology::Topology, index::Integer)\n\nGet a copy of the residue containing the atom at index in the topology.\n\nThis function will return nothing if the atom is not in a residue, or if the index is bigger than the number of atoms in the topology.\n\n\n\n\n\n","category":"method"},{"location":"reference/residue/#Chemfiles.set_property!-Tuple{Residue,String,Any}","page":"Residue","title":"Chemfiles.set_property!","text":"set_property!(residue::Residue, name::String, value)\n\nSet a named property for the given residue.\n\n\n\n\n\n","category":"method"},{"location":"reference/selection/#Selection","page":"Selection","title":"Selection","text":"","category":"section"},{"location":"reference/selection/","page":"Selection","title":"Selection","text":"Selection","category":"page"},{"location":"reference/selection/#Chemfiles.Selection","page":"Selection","title":"Chemfiles.Selection","text":"A Selection is used to select a group of atoms. Examples of selections are \"name H\" and \"(x < 45 and name O) or name C\". See the full documentation <http://chemfiles.org/chemfiles/latest/selections.html>_ for more information about the selection language.\n\n\n\n\n\n","category":"type"},{"location":"reference/selection/","page":"Selection","title":"Selection","text":"Modules = [Chemfiles]\nPages   = [\"Selection.jl\"]","category":"page"},{"location":"reference/selection/#Chemfiles.Selection-Tuple{AbstractString}","page":"Selection","title":"Chemfiles.Selection","text":"Selection(selection::AbstractString)\n\nCreate a Selection from a selection string.\n\n\n\n\n\n","category":"method"},{"location":"reference/selection/#Base.deepcopy-Tuple{Selection}","page":"Selection","title":"Base.deepcopy","text":"deepcopy(selection::Selection)\n\nMake a deep copy of a selection.\n\n\n\n\n\n","category":"method"},{"location":"reference/selection/#Base.size-Tuple{Selection}","page":"Selection","title":"Base.size","text":"size(selection::Selection)\n\nGet the size of a selection, i.e. the number of atoms we are selecting together.\n\n\n\n\n\n","category":"method"},{"location":"reference/selection/#Chemfiles.evaluate-Tuple{Selection,Frame}","page":"Selection","title":"Chemfiles.evaluate","text":"evaluate(selection::Selection, frame::Frame)\n\nEvaluate a selection on a given frame. This function return a list of indexes or tuples of indexes of atoms in the frame matching the selection.\n\n\n\n\n\n","category":"method"},{"location":"reference/selection/#Chemfiles.selection_string-Tuple{Selection}","page":"Selection","title":"Chemfiles.selection_string","text":"selection_string(selection::Selection)\n\nGet the selection string used to create a given selection.\n\n\n\n\n\n","category":"method"},{"location":"reference/topology/#Topology","page":"Topology","title":"Topology","text":"","category":"section"},{"location":"reference/topology/","page":"Topology","title":"Topology","text":"Topology\nChemfiles.BondOrder","category":"page"},{"location":"reference/topology/#Chemfiles.Topology","page":"Topology","title":"Chemfiles.Topology","text":"A Topology describes the organisation of the particles in the system: what their names are, how they are bonded together, etc. A Topology is a list of Atoms in the system, together with the list of bonds between the atoms.\n\n\n\n\n\n","category":"type"},{"location":"reference/topology/#Chemfiles.BondOrder","page":"Topology","title":"Chemfiles.BondOrder","text":"Possible bond orders in Chemfiles:     - Chemfiles.UnknownBond: when the bond order is not specified     - Chemfiles.SingleBond: for single bonds     - Chemfiles.DoubleBond: for double bonds     - Chemfiles.TripleBond: for triple bonds     - Chemfiles.QuadrupleBond: for quadruple bonds (present in some metals)     - Chemfiles.QintupletBond: for qintuplet bonds (present in some metals)     - Chemfiles.AmideBond: for amide bonds     - Chemfiles.AromaticBond: for aromatic bonds\n\n\n\n\n\n","category":"type"},{"location":"reference/topology/","page":"Topology","title":"Topology","text":"Modules = [Chemfiles]\nPages   = [\"Topology.jl\"]","category":"page"},{"location":"reference/topology/#Chemfiles.Topology-Tuple{Frame}","page":"Topology","title":"Chemfiles.Topology","text":"Topology(frame::Frame)\n\nGet a copy of the Topology of the given frame.\n\n\n\n\n\n","category":"method"},{"location":"reference/topology/#Chemfiles.Topology-Tuple{}","page":"Topology","title":"Chemfiles.Topology","text":"Topology()\n\nCreate an empty Topology.\n\n\n\n\n\n","category":"method"},{"location":"reference/topology/#Base.deepcopy-Tuple{Topology}","page":"Topology","title":"Base.deepcopy","text":"deepcopy(topology::Topology)\n\nMake a deep copy of a topology.\n\n\n\n\n\n","category":"method"},{"location":"reference/topology/#Base.resize!-Tuple{Topology,Integer}","page":"Topology","title":"Base.resize!","text":"resize!(topology::Topology, size::Integer)\n\nResize the topology to hold natoms atoms. If the new number of atoms is bigger than the current number, new atoms will be created with an empty name and type.\n\nIf it is lower than the current number of atoms, the last atoms will be removed, together with the associated bonds, angles and dihedrals.\n\n\n\n\n\n","category":"method"},{"location":"reference/topology/#Base.size-Tuple{Topology}","page":"Topology","title":"Base.size","text":"size(topology::Topology)\n\nGet the Topology size, i.e. the current number of atoms.\n\n\n\n\n\n","category":"method"},{"location":"reference/topology/#Chemfiles.add_atom!-Tuple{Topology,Atom}","page":"Topology","title":"Chemfiles.add_atom!","text":"add_atom!(topology::Topology, atom::Atom)\n\nAdd an atom at the end of a topology.\n\n\n\n\n\n","category":"method"},{"location":"reference/topology/#Chemfiles.add_bond!","page":"Topology","title":"Chemfiles.add_bond!","text":"add_bond!(topology::Topology, i::Integer, j::Integer, order=nothing)\n\nAdd a bond between the atoms i and j in the topology, optionaly setting the bond order.\n\n\n\n\n\n","category":"function"},{"location":"reference/topology/#Chemfiles.add_residue!-Tuple{Topology,Residue}","page":"Topology","title":"Chemfiles.add_residue!","text":"add_residue!(topology::Topology, residue::Residue)\n\nAdd a copy of residue to this topology.\n\nThe residue id must not already be in the topology, and the residue must contain only atoms that are not already in another residue.\n\n\n\n\n\n","category":"method"},{"location":"reference/topology/#Chemfiles.angles-Tuple{Topology}","page":"Topology","title":"Chemfiles.angles","text":"angles(topology::Topology)\n\nGet the angles in the topology, in a 3 x angles_count(topology) array.\n\n\n\n\n\n","category":"method"},{"location":"reference/topology/#Chemfiles.angles_count-Tuple{Topology}","page":"Topology","title":"Chemfiles.angles_count","text":"angles_count(topology::Topology)\n\nGet the number of angles in the topology.\n\n\n\n\n\n","category":"method"},{"location":"reference/topology/#Chemfiles.are_linked-Tuple{Topology,Residue,Residue}","page":"Topology","title":"Chemfiles.are_linked","text":"are_linked(topology::Topology, first::Residue, second::Residue)\n\nCheck if the two residues first and second from the topology are linked together, i.e. if there is a bond between one atom in the first residue and one atom in the second one.\n\n\n\n\n\n","category":"method"},{"location":"reference/topology/#Chemfiles.bond_order-Tuple{Topology,Integer,Integer}","page":"Topology","title":"Chemfiles.bond_order","text":"bond_order(topology::Topology, i::Integer, j::Integer)\n\nGet the BondOrder for the bond between atoms i and j in the topology.\n\n\n\n\n\n","category":"method"},{"location":"reference/topology/#Chemfiles.bond_orders-Tuple{Topology}","page":"Topology","title":"Chemfiles.bond_orders","text":"bond_orders(topology::Topology)\n\nGet the BondOrder for all the bonds in the topology.\n\n\n\n\n\n","category":"method"},{"location":"reference/topology/#Chemfiles.bonds-Tuple{Topology}","page":"Topology","title":"Chemfiles.bonds","text":"bonds(topology::Topology)\n\nGet the bonds in the topology, in a 2 x bonds_count(topology) array.\n\n\n\n\n\n","category":"method"},{"location":"reference/topology/#Chemfiles.bonds_count-Tuple{Topology}","page":"Topology","title":"Chemfiles.bonds_count","text":"bonds_count(topology::Topology)\n\nGet the number of bonds in the topology.\n\n\n\n\n\n","category":"method"},{"location":"reference/topology/#Chemfiles.count_residues-Tuple{Topology}","page":"Topology","title":"Chemfiles.count_residues","text":"count_residues(topology::Topology)\n\nGet the number of residues in the topology.\n\n\n\n\n\n","category":"method"},{"location":"reference/topology/#Chemfiles.dihedrals-Tuple{Topology}","page":"Topology","title":"Chemfiles.dihedrals","text":"dihedrals(topology::Topology)\n\nGet the dihedral angles in the topology, in a 4 x dihedrals_count(topology) array.\n\n\n\n\n\n","category":"method"},{"location":"reference/topology/#Chemfiles.dihedrals_count-Tuple{Topology}","page":"Topology","title":"Chemfiles.dihedrals_count","text":"dihedrals_count(topology::Topology)\n\nGet the number of dihedral angles in the topology.\n\n\n\n\n\n","category":"method"},{"location":"reference/topology/#Chemfiles.impropers-Tuple{Topology}","page":"Topology","title":"Chemfiles.impropers","text":"impropers(topology::Topology)\n\nGet the improper angles in the topology, in a 4 x impropers_count(topology) array.\n\n\n\n\n\n","category":"method"},{"location":"reference/topology/#Chemfiles.impropers_count-Tuple{Topology}","page":"Topology","title":"Chemfiles.impropers_count","text":"impropers_count(topology::Topology)\n\nGet the number of improper angles in the topology.\n\n\n\n\n\n","category":"method"},{"location":"reference/topology/#Chemfiles.remove_atom!-Tuple{Topology,Integer}","page":"Topology","title":"Chemfiles.remove_atom!","text":"remove_atom!(topology::Topology, index::Integer)\n\nRemove the atom at the given index from a topology.\n\n\n\n\n\n","category":"method"},{"location":"reference/topology/#Chemfiles.remove_bond!-Tuple{Topology,Integer,Integer}","page":"Topology","title":"Chemfiles.remove_bond!","text":"remove_bond!(topology::Topology, i::Integer, j::Integer)\n\nRemove any existing bond between the atoms i and j in the topology.\n\n\n\n\n\n","category":"method"},{"location":"#Julia-interface-to-chemfiles","page":"Julia interface to chemfiles","title":"Julia interface to chemfiles","text":"","category":"section"},{"location":"","page":"Julia interface to chemfiles","title":"Julia interface to chemfiles","text":"This is the documentation for the Julia interface to the chemfiles library.","category":"page"},{"location":"","page":"Julia interface to chemfiles","title":"Julia interface to chemfiles","text":"The Julia interface to chemfiles wraps around the C interface providing a Julian API. All the functionalities are in the Chemfiles module, which can be imported by the using Chemfiles expression. The Chemfiles module is built around the main types of chemfiles: Trajectory, Frame, UnitCell, Topology, Residue, Atom, and Selection.","category":"page"},{"location":"","page":"Julia interface to chemfiles","title":"Julia interface to chemfiles","text":"warning: Warning\nAll indexing in chemfiles is 0-based! That means that the first atom in a frame have the index 0, not 1. This is because no translation is made from the underlying C library.This may change in future release to use 1-based indexing, which is more familiar to Julia developers.","category":"page"},{"location":"#Installation","page":"Julia interface to chemfiles","title":"Installation","text":"","category":"section"},{"location":"","page":"Julia interface to chemfiles","title":"Julia interface to chemfiles","text":"You will need to use a recent version of Julia (Julia = 10), and then you can install the Chemfiles package by running the following at Julia prompt:","category":"page"},{"location":"","page":"Julia interface to chemfiles","title":"Julia interface to chemfiles","text":"pkg> add Chemfiles\n\n# You may also want to run the test suite with\npkg> test Chemfiles","category":"page"},{"location":"#User-documentation","page":"Julia interface to chemfiles","title":"User documentation","text":"","category":"section"},{"location":"","page":"Julia interface to chemfiles","title":"Julia interface to chemfiles","text":"This section contains example of how to use Chemfiles.jl, and the complete interface reference for all the types and functions in chemfiles.","category":"page"},{"location":"","page":"Julia interface to chemfiles","title":"Julia interface to chemfiles","text":"Pages = [\n    \"reference/trajectory.md\",\n    \"reference/frame.md\",\n    \"reference/atom.md\",\n    \"reference/cell.md\",\n    \"reference/topology.md\",\n    \"reference/residue.md\",\n    \"reference/selection.md\",\n    \"reference/misc.md\",\n]","category":"page"}]
}
